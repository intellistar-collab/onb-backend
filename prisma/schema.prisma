generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String     @id @default(uuid())
  username           String     @db.VarChar(50)
  email              String     @unique @db.VarChar(100)
  password           String     @db.VarChar(255)
  avatar             String?
  address            String?
  mobile             String?    @db.VarChar(15)
  location           String?
  role               Role       @default(USER)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  otp                String?    @db.VarChar(6)
  otpExpiry          DateTime?
  requiresOTP        Boolean    @default(true)
  resetToken         String?    @db.VarChar(255)
  resetTokenExpiry   DateTime?
  refreshToken       String?
  refreshTokenExpiry DateTime?
  city               String?    @db.VarChar(100)
  country            String?    @db.VarChar(100)
  dob                DateTime?
  firstName          String?    @db.VarChar(50)
  gender             String?    @db.VarChar(10)
  lastName           String?    @db.VarChar(50)
  state              String?    @db.VarChar(100)
  status             UserStatus @default(PENDING)
  street             String?    @db.VarChar(100)
  streetNumberOrName String?    @db.VarChar(100)
  zipCode            String?    @db.VarChar(20)
  wallet             Wallet?         @relation("UserWallet")
  scores             Score[]         @relation("UserScore")
  inventoryItems     InventoryItem[] @relation("UserInventory")
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  balance      Decimal       @default(0.0) @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         Users         @relation("UserWallet", fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String          @id @default(uuid())
  walletId  String
  amount    Decimal         @db.Decimal(10, 2)
  type      TransactionType
  createdAt DateTime        @default(now())
  wallet    Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String    @id @default(uuid())
  username          String    @db.VarChar(50)
  email             String    @unique @db.VarChar(255)
  verified          Boolean   @default(false)
  verificationToken String?   @db.VarChar(255)
  referrerEmail     String?   @db.VarChar(255)
  points            Int       @default(0)
  createdAt         DateTime  @default(now())
  verifiedAt        DateTime?
  followUpEmailSent Boolean   @default(false)
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    String
  score     Int
  source    String
  createdAt DateTime @default(now())
  user      Users    @relation("UserScore", fields: [userId], references: [id], onDelete: Cascade)
}

model BoxCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  photo       String?
  order       Int      @default(0)
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boxes       Box[]

  @@index([order])
}

model Box {
  id                       String      @id @default(cuid())
  title                    String
  description              String?
  location                 String
  price                    Decimal     @db.Decimal(10, 2)
  imageUrl                 String
  backgroundImage          String
  isActive                 Boolean     @default(true)
  order                    Int         @default(0)
  boxCategoryId            String
  purchasedCount           Int         @default(0)
  totalRevenue             Decimal     @default(0) @db.Decimal(12, 2)
  totalPayout              Decimal     @default(0) @db.Decimal(12, 2)
  exchangeablePayout       Decimal     @default(0) @db.Decimal(12, 2)
  retainedProfitPercentage Decimal     @default(0) @db.Decimal(12, 2)
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt
  category                 BoxCategory     @relation(fields: [boxCategoryId], references: [id])
  items                    Item[]
  inventoryItems           InventoryItem[] @relation("BoxInventory")

  @@index([boxCategoryId])
  @@index([isActive, order])
}

model Item {
  id             String     @id @default(cuid())
  name           String
  description    String?
  imageUrl       String?
  price          Decimal?
  percentage     Decimal    @default(0)
  status         ItemStatus
  viewCount      Int        @default(0)
  clickCount     Int        @default(0)
  openedCount    Int        @default(0)
  purchasedCount Int        @default(0)
  boxId          String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  box            Box             @relation(fields: [boxId], references: [id])
  inventoryItems InventoryItem[] @relation("ItemInventory")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  PENDING
  ACTIVE
  DISABLED
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum ItemStatus {
  MOST_WANTED
  WANTED
  IN_DEMAND
  UNCOMMON
  COMMON
}

model InventoryItem {
  id        String   @id @default(uuid())
  userId    String
  itemId    String
  boxId     String
  status    String   @default("KEPT") // KEPT or SOLD
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user Users @relation("UserInventory", fields: [userId], references: [id], onDelete: Cascade)
  item Item  @relation("ItemInventory", fields: [itemId], references: [id], onDelete: Cascade)
  box  Box   @relation("BoxInventory", fields: [boxId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId, status])
}
