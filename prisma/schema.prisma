generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String    @id @default(uuid())
  firstName          String?   @db.VarChar(50)
  lastName           String?   @db.VarChar(50)
  dob                DateTime?
  gender             String?   @db.VarChar(10)
  username           String    @db.VarChar(50)
  email              String    @unique @db.VarChar(100)
  password           String    @db.VarChar(255)
  avatar             String?
  address            String?
  streetNumberOrName String?   @db.VarChar(100)
  street             String?   @db.VarChar(100)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(100)
  zipCode            String?   @db.VarChar(20)
  country            String?   @db.VarChar(100)
  mobile             String?   @db.VarChar(15)
  location           String?
  role               Role      @default(USER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  otp                String?   @db.VarChar(6)
  otpExpiry          DateTime?
  requiresOTP        Boolean   @default(true)
  resetToken         String?   @db.VarChar(255)
  resetTokenExpiry   DateTime?
  refreshToken       String?
  refreshTokenExpiry DateTime?
  wallet             Wallet?   @relation("UserWallet")
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  balance      Decimal       @default(0.0) @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         Users         @relation("UserWallet", fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String          @id @default(uuid())
  walletId  String
  amount    Decimal         @db.Decimal(10, 2)
  type      TransactionType
  createdAt DateTime        @default(now())
  wallet    Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String    @id @default(uuid())
  username          String    @db.VarChar(50)
  email             String    @unique @db.VarChar(255)
  verified          Boolean   @default(false)
  verificationToken String?   @db.VarChar(255)
  referrerEmail     String?   @db.VarChar(255)
  points            Int       @default(0)
  createdAt         DateTime  @default(now())
  verifiedAt        DateTime?
  followUpEmailSent Boolean   @default(false)
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum TransactionType {
  CREDIT
  DEBIT
}

model Score {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  score     Int
  createdAt DateTime @default(now())
}

model BoxCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  photo       String?
  order       Int      @default(0)
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  boxes Box[]

  @@index([order])
}

model Box {
  id              String  @id @default(cuid())
  title           String
  description     String?
  location        String
  price           Decimal @db.Decimal(10, 2)
  imageUrl        String
  backgroundImage String
  isActive        Boolean @default(true)
  order           Int     @default(0)

  // Relations
  boxCategoryId String
  category      BoxCategory @relation(fields: [boxCategoryId], references: [id])
  items         Item[]

  // Analytics fields for future dashboard/insights
  viewCount      Int @default(0)
  clickCount     Int @default(0)
  openedCount    Int @default(0)
  purchasedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boxCategoryId])
  @@index([isActive, order])
}

enum ItemStatus {
  MOST_WANTED
  WANTED
  IN_DEMAND
  UNCOMMON
  COMMON
}

model Item {
  id          String     @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  price       Decimal?
  percentage  Decimal    @default(0)
  status      ItemStatus

  viewCount      Int @default(0)
  clickCount     Int @default(0)
  openedCount    Int @default(0)
  purchasedCount Int @default(0)

  boxId String
  box   Box    @relation(fields: [boxId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
